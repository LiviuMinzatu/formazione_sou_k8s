pipeline {
    agent { label 'agent' }

    parameters {
        string(
            name: 'GIT_REF',
            defaultValue: 'main',
            description: 'Inserisci il nome del branch o tag Git da buildare (es: main, develop, v1.0.0)'
        )
    }

    environment {
        DOCKER_HUB_REPO = 'freddo18/flask'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${params.GIT_REF}"]],
                    userRemoteConfigs: [[url: 'https://github.com/LiviuMinzatu/formazione_sou_k8s.git']],
                    extensions: []
                ])
            }
        }

        stage('Calcolo tag immagine Docker') {
            steps {
                script {
                    def sha = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    def ref = params.GIT_REF?.trim()

                    if (!ref || ref == '' || ref == 'null') {
                        ref = 'main'
                    }

                    if (ref == 'main') {
                        env.IMAGE_TAG = 'latest'
                    } else if (ref.startsWith('v')) {
                        env.IMAGE_TAG = ref
                    } else {
                        env.IMAGE_TAG = "${ref}-${sha}"
                    }

                    echo " Docker tag generato: ${env.IMAGE_TAG}"
                }
            }
        }

        stage('Build Docker') {
            steps {
                dir('Track 2/flask') {
                    sh '''
                        echo " Build immagine Docker..."
                        docker build -t ${DOCKER_HUB_REPO}:${IMAGE_TAG} .
                    '''
                }
            }
        }

        stage('Push Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                        docker push ${DOCKER_HUB_REPO}:${IMAGE_TAG}
                        docker logout
                    '''
                }
            }
        }
    }

    post {
        always {
            sh '''
                echo " Pulizia immagine locale..."
                docker rmi ${DOCKER_HUB_REPO}:${IMAGE_TAG} || true
            '''
        }
    }
}
